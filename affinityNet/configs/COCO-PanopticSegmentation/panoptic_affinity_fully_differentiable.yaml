_BASE_: panoptic_affinity_pretrain.yaml
MODEL:
  FREEZE_BN: True
  TRAIN_EDGE_INDEX_START: 0
  TRAIN_EDGE_INDEX_END: 5
  FINE_TUNING_MODE: True
  FREEZE_SEM_SEG_TILL: 1
  FREEZE_EDGE_COSTS_TILL: 1
  PANOPTIC_AFFINITY:
    LAMBDA_VAL_START: 1000.0
    LAMBDA_VAL_END: 5000.0
    AMC_LOSS_WEIGHT: 100.0
    STUFF_AREA: 4096
    INSTANCE_AREA: 200
    EVAL_PQ_DURING_TRAIN: True
    TARGET_DOWNSAMPLING: 4
  SEM_SEG_HEAD:
    LOSS_WEIGHT: 0.0
    NORM: "BN"
  AFF_EMBED_HEAD:
    AFF_LOSS_WEIGHT: 0.0
    NORM: "BN"
SOLVER:
  OPTIMIZER: "ADAM"
  BASE_LR: 0.0001
  WEIGHT_DECAY: 0.0
  WEIGHT_DECAY_NORM: 0.0
  WEIGHT_DECAY_BIAS: 0.0
  WARMUP_ITERS: 500
  MAX_ITER: 20000
  LR_SCHEDULER_NAME: "WarmupPolyLR"
  IMS_PER_BATCH: 24
  CHECKPOINT_PERIOD: 500
INPUT:
  INSTANCE_LOSS_WEIGHT: 1.0
  SMALL_INSTANCE_WEIGHT: 1
  MIN_SIZE_TRAIN: !!python/object/apply:eval ["[int(x * 0.1 * 640) for x in range(7, 13)]"]
  MIN_SIZE_TRAIN_SAMPLING: "choice"
  CROP:
    ENABLED: True
    TYPE: "absolute"
    SIZE: (640, 640)
    SINGLE_CATEGORY_MAX_AREA: 1.0
DATALOADER:
  EVAL_BATCH_SIZE: 4
  NUM_WORKERS: 4 # invest computational resources in solving AMWC.
TEST:
  EVAL_PERIOD: -1
SEED: -1
DATASETS:
  TRAIN: ("coco_2017_train_panoptic",)
  TEST: ("coco_2017_val_panoptic",)
OUTPUT_DIR: output/coco/fully_differentiable/
VIS_PERIOD: 100
VAL_LOSS_PERIOD: -1
